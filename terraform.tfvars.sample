location = "region_name" # for e.g. australiaeast
app_title = "librechat"
openai_key = ""
chatgpt_token = "user_provided"
anthropic_api_key = "user_provided"
bingai_token = "user_provided"
palm_key = "user_provided"
app_service_sku_name = "B1"
mongo_uri = ""
use_cosmosdb_free_tier = true

deployments = {
  "gpt-35-turbo" = {
    name = "gpt-35-turbo"
    rai_policy_name = "Microsoft.Default"
    model_name = "gpt-35-turbo"
    model_format = "OpenAI"
    model_version = "0613"
    scale_type = "Standard"
    capacity = 20  # 20,000 tokens per minute (optional, defaults to 1,000 if not set)
  }
  "gpt-35-turbo-16k" = {
    name = "gpt-35-turbo-16k"
    rai_policy_name = "Microsoft.Default"
    model_name = "gpt-35-turbo-16k"
    model_format = "OpenAI"
    model_version = "0613"
    scale_type = "Standard"
    capacity = 20  # 20,000 tokens per minute
  }
  "gpt-4" = {
    name = "gpt-4"
    rai_policy_name = "Microsoft.Default"
    model_name = "gpt-4"
    model_format = "OpenAI"
    model_version = "0613"
    scale_type = "Standard"
    capacity = 20  # 20,000 tokens per minute
  }
  "gpt-4-32k" = {
    name = "gpt-4-32k"
    rai_policy_name = "Microsoft.Default"
    model_name = "gpt-4-32k"
    model_format = "OpenAI"
    model_version = "0613"
    scale_type = "Standard"
    capacity = 20  # 20,000 tokens per minute
  }
  "text-embedding-ada-002" = {
    name = "text-embedding-ada-002"
    rai_policy_name = "Microsoft.Default"
    model_name = "text-embedding-ada-002"
    model_format = "OpenAI"
    model_version = "2"
    scale_type = "Standard"
    capacity = 20  # 20,000 tokens per minute
  }
}

azure_openai_api_deployment_name = ""
azure_openai_api_completions_deployment_name = ""
azure_openai_api_version = "2024-02-01"
azure_openai_api_embeddings_deployment_name = ""
public_network_access_enabled = false

#========================================#
# MCP (Model Context Protocol) Config    #
#========================================#
#
# Enable MCP to extend LibreChat with AI tools and agents.
# When enabled, automatically provisions a librechat.yaml config
# to Azure Blob Storage with MCP servers and agents configured.
# See docs: https://www.librechat.ai/docs/features/mcp
#
# IMPORTANT: Choose ONE of these options (they are mutually exclusive):
#
# Option 1: Enable MCP (auto-generates config in Azure Blob Storage)
# enable_mcp = true
# mcp_servers = ["filesystem", "fetch", "puppeteer"]
#
# Option 2: Use a custom librechat.yaml from URL or path
# config_path = "https://example.com/configs/librechat.yaml"
#
# ERROR: Setting both enable_mcp=true AND config_path will cause Terraform to fail.
# When enable_mcp=true, config is auto-generated and config_path is ignored.
#
# Optional MCP behavior tuning:
# mcp_oauth_on_auth_error      = "true"   # Treat 401/403 as OAuth requirement when metadata absent
# mcp_oauth_detection_timeout  = "5000"   # OAuth detection timeout (ms)
# mcp_connection_check_ttl     = "60000"  # Cache connection status checks (ms)

# Example configuration (uncomment one option):
# enable_mcp = true
# mcp_servers = ["filesystem", "fetch", "puppeteer"]
# OR:
# config_path = "https://example.com/configs/librechat.yaml"
# mcp_oauth_on_auth_error = ""
# mcp_oauth_detection_timeout = ""
# mcp_connection_check_ttl = ""

# Google OAuth Configuration (for social login)
# google_client_id = ""
# google_client_secret = ""
